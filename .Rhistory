scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_hc() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-3, suffix = 'K')) +
# Adjust the y-axis scale.
scale_x_discrete(labels = state_tbl$state %>% str_wrap(width = 15)) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
# Plot state data
state_g <-
state_tbl %>%
# Initialize the canvas
ggplot(aes(state %>%
fct_reorder(population) %>%
fct_rev(),
population)
) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = population %>%
scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_clean() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-3, suffix = 'K')) +
# Adjust the y-axis scale.
scale_x_discrete(labels = state_tbl$state %>% str_wrap(width = 15)) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
# Plot state data
state_g <-
state_tbl %>%
# Initialize the canvas
ggplot(aes(state %>%
fct_reorder(population) %>%
fct_rev(),
population)
) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = population %>%
scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_base() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-3, suffix = 'K')) +
# Adjust the y-axis scale.
scale_x_discrete(labels = state_tbl$state %>% str_wrap(width = 15)) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
# Plot state data
state_g <-
state_tbl %>%
# Initialize the canvas
ggplot(aes(state %>%
fct_reorder(population) %>%
fct_rev(),
population)
) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = population %>%
scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_tufte() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-3, suffix = 'K')) +
# Adjust the y-axis scale.
scale_x_discrete(labels = state_tbl$state %>% str_wrap(width = 15)) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
# Plot state data
state_g <-
state_tbl %>%
# Initialize the canvas
ggplot(aes(state %>%
fct_reorder(population) %>%
fct_rev(),
population)
) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = population %>%
scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_tufte() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
# Adjust the y-axis scale.
scale_x_discrete(labels = state_tbl$state %>% str_wrap(width = 15)) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
# Graph population by state and gender in ascending order.
gender_tbl <- py$gender_df
gender_g <- gender_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 10)) %>%
# initialize the canvas
ggplot(aes(state %>% fct_reorder(population), population)) +
# Add the geometries.
geom_col(aes(fill = gender)) +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
expand_limits(y = c(0, 1500000)) +
# Add a theme: tidyquant::theme_tq().
theme_hc() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'Jonglei State has the largest population',
x        = NULL,
y        = 'Population') +
# Adjust the graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face = 'plain',
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(hjust  = 1, angle = 30),
# panel.grid.major.x  = element_blank(),
legend.position     = "top"
)
# Display the graph.
gender_g
gender_g <- gender_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 10),
state = state %>% fct_reorder(population) %>% fct_rev()) %>%
# initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries.
geom_col(aes(fill = gender)) +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
expand_limits(y = c(0, 1500000)) +
# Add a theme: tidyquant::theme_tq().
theme_hc() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'Jonglei State has the largest population',
x        = NULL,
y        = 'Population') +
# Adjust the graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face = 'plain',
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(hjust  = 1, angle = 30),
# panel.grid.major.x  = element_blank(),
legend.position     = "top"
)
# Display the graph.
gender_g
gender_g <- gender_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 10),
state = state %>% fct_reorder(population) %>% fct_rev()) %>%
# initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries.
geom_col(aes(fill = gender)) +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
expand_limits(y = c(0, 1500000)) +
# Formatting
theme_clean() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'Jonglei State has the largest population',
x        = NULL,
y        = 'Population') +
# Adjust the graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face = 'plain',
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(hjust  = 1, angle = 30),
# panel.grid.major.x  = element_blank(),
legend.position     = "top"
)
# Display the graph
gender_g
gender_g <- gender_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 10),
state = state %>% fct_reorder(population) %>% fct_rev()) %>%
# initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries.
geom_col(aes(fill = gender)) +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
expand_limits(y = c(0, 1500000)) +
# Formatting
theme_clean() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census Data by State and Gender',
x        = NULL,
y        = 'Population') +
# Adjust the graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face = 'plain',
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle = 30, hjust  = 1),
legend.position     = "top"
)
# Display the graph
gender_g
gender_g <- gender_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 15),
state = state %>% fct_reorder(population) %>% fct_rev()) %>%
# initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries.
geom_col(aes(fill = gender)) +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
expand_limits(y = c(0, 1500000)) +
# Formatting
theme_clean() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census Data by State and Gender',
x        = NULL,
y        = 'Population') +
# Adjust the graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face = 'plain',
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle = 30, hjust  = 1),
legend.position     = "top"
)
# Display the graph
gender_g
# Plot state data
state_g <-
state_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 15),
state = state %>% fct_reorder(population) %>% fct_rev()) %>%
# Initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = population %>%
scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_tufte() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
# Adjust the y-axis scale.
scale_x_discrete(labels = state_tbl$state %>% str_wrap(width = 15)) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
# Plot state data
state_g <-
state_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 15),
state = state %>% fct_reorder(population) %>% fct_rev()) %>%
# Initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = population %>%
scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_tufte() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
# Adjust the y-axis scale.
scale_x_discrete(labels = state) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Plot state data
state_g <-
state_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 15),
state = state %>% fct_reorder(population) %>% fct_rev()) %>%
# Initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = population %>%
scales::number(scale = 1e-6,
accuracy = 0.01,
suffix = "m"))) +
# Formatting
theme_tufte() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
# Adjust the y-axis scale.
# scale_x_discrete(labels = state) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
# Plot state data
state_g <-
state_tbl %>%
# Modify state names to wrap around the x-axis.
mutate(state = state %>% str_wrap(width = 15),
state = state %>% fct_reorder(population) %>% fct_rev(),
label = population %>%
scales::number(scale = 1e-6, accuracy = 0.01, suffix = "m")) %>%
# Initialize the canvas
ggplot(aes(state, population)) +
# Add the geometries: we're using seaborn colorblind color #7.
geom_col(fill = '#84ba3d') +
ggrepel::geom_label_repel(aes(label = label)) +
# Formatting
theme_tufte() +
# Add the title, x-axis title, and y-axis title.
labs(
title    = 'South Sudan 2008 Census by State',
x        = NULL,
y        = 'Population',
caption  = 'Caption: Jonglei State has the largest population.') +
# Adjust the y-axis scale.
scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +
# Modify the y-axis limits.
expand_limits(y = c(0, 1500000)) +
# Adjust graph attributes.
theme(
plot.title          = element_text(hjust  = 0.5,
face   = 'plain',
size   = 15,
margin = margin(0, 0, 15, 0, unit = "pt")),
plot.subtitle       = element_text(hjust  = 0.5,
margin = margin(2, 0, 10, 0, unit = "pt")),
axis.text.x         = element_text(angle  = 45,
hjust  = 1)
)
# Display the graph.
state_g
reticulate::repl_python()
