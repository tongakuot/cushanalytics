{
  "hash": "1f3799e9614e81230419fb8fd22f7f22",
  "result": {
    "markdown": "---\ntitle: \"Marrying R with Python\"\nauthor: \"Alier Reng\"\ndate: \"01/30/2022\"\ndate-format: full\ndescription: \"This post demonstrates how to perform data wrangling with the pandas library - I love pandas, although I use R almost exclusively at work. We will first transform and manipulate the data with pandas and then visualize the results with the ggplot2 package.\"\ncategories: [Data Wrangling, Python, R, Data Science, Data Visualization]\nimage: \"r-python.png\"\n---\n\n## Introduction\n\n\\\nMost data scientists and data analysts would agree with the assertion that *data scientists and data analysts spend about 80% of their time cleaning and transforming data - or, put, performing data wrangling.* Because it's imperative to transform your data into a tidy form before using it in your data science project.\nThis means that aspiring data scientists and data analysts must learn data manipulation techniques and know the data munging tools in their programming languages of choice to succeed in their data science careers.\nThis post demonstrates how to perform data wrangling with the `pandas` library - I love `pandas`, although I use `R` almost exclusively at work.\nWe will first transform and manipulate the data with `pandas` and then visualize the results with the `ggplot2` package.\n\n`Pandas` was written by *Wes McKinney* as ***\" the open-source Python library for data analysis**.\" (Python for Data Analysis, 2017, pp.111)*\n\n> `pandas` is built on top of `NumPy` and makes it easy to use in `NumPy-centric` applications.\n> *(Python for Data Analysis, 2017, pp.111)*\n\nThis is the first article in our Data Wrangling With pandas series.\nSo keep an eye on our next article - we plan to be releasing at least one piece quarterly.\n\n### Loading `R` Packages\n\nHere we'll load both `tidyverse`, even though we'll use `dplyr` and `ggplot2` from `tidyverse` (we could have loaded these packages individually, but we decided to load them this way).\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(reticulate)\nlibrary(tidyverse)\n```\n\n::: {.cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output-stderr}\n```\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.6     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggthemes)\n```\n:::\n\n### Loading `Python` Libraries\n\nHere we'll load `pandas` and `NumPy` libraries.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Importing the libraries\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n## Transforming the Data\n\nData transformation is the most crucial step when doing a data science project (because the success of your project depends on having a cleaned, tidy data).\nTherefore, it's worthwhile taking your time to ensure that your data is thoroughly cleaned and transformed appropriately.\nThis is the topic or objective of this article - performing data wrangling with the `pandas` library.\n\n### Importing the Dataset\n\nWe'll use the South Sudan 2008 Census dataset in this project.\nSo, we'll load it as shown below.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Importing the dataset\nss_census_raw = pd.read_csv('/Users/areng/Desktop/cushanalytics/00_data/ss_2008_census_data_raw.csv')\n\n# Inspect the first 5 Rows\nss_census_raw.head()\n```\n\n::: {.cell-output-stdout}\n```\n  Region Region Name Region - RegionId  ...  Scale    Units      2008\n0  KN.A2  Upper Nile             SS-NU  ...  units  Persons  964353.0\n1  KN.A2  Upper Nile             SS-NU  ...  units  Persons  150872.0\n2  KN.A2  Upper Nile             SS-NU  ...  units  Persons  151467.0\n3  KN.A2  Upper Nile             SS-NU  ...  units  Persons  126140.0\n4  KN.A2  Upper Nile             SS-NU  ...  units  Persons  103804.0\n\n[5 rows x 10 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Inspect the last 5 rows\nss_census_raw.tail()\n```\n\n::: {.cell-output-stdout}\n```\n            Region  ...    2008\n448         KN.A11  ...  5274.0\n449         KN.A11  ...  8637.0\n450            NaN  ...     NaN\n451        Source:  ...     NaN\n452  Download URL:  ...     NaN\n\n[5 rows x 10 columns]\n```\n:::\n:::\n\n### Deleting Rows with Missing Values\n\nAs you can see in the above outputs, our dataset contains several columns that we do not need or do not make sense for our purpose, and the last 3 rows contain missing values.\nNext, let's also inspect the last five rows and determine if our dataset has any missing values.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Checking for missing values\nss_census_raw.isna().sum()\n```\n\n::: {.cell-output-stdout}\n```\nRegion               1\nRegion Name          1\nRegion - RegionId    3\nVariable             3\nVariable Name        3\nAge                  3\nAge Name             3\nScale                3\nUnits                3\n2008                 3\ndtype: int64\n```\n:::\n:::\n\nThe above outputs of the last five rows indicate that our data contains multiple rows with missing values (or nas), the data source, and the download URL where we obtained our dataset.\nWe'll delete these rows that do not contribute any value to our analysis.\nAlso, we see above that our dataset consists of 10 columns (or variables/features) and 453 rows (or observations).\nTo obtain or display our data dimensions in `Python`, we use the `shape`, a data attribute.\n`Python's` data attributes are different from functions in that we omit the parentheses `\"()\"` after the attribute.\nFurther, above, we displayed the counts of missing values in each column of our dataset with `isna()` to extract the rows with `nas` and then tallied them with `sum()` to find the sum of the rows with the missing values in each column.\nThese methods come in handy when we want to quickly summarize the rows and columns with missing values in our dataset.\n\nNext, let's check the count of rows and columns of our dataset.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Checking the number of rows and columns\nss_census_raw.shape\n```\n\n::: {.cell-output-stdout}\n```\n(453, 10)\n```\n:::\n:::\n\n### Extracting Column Names\n\nBefore we begin our data cleaning process, let's extract the columns as a list using the `.to_list()` method and subset our data with the columns of interest.\nHere, we're only interested in these columns: 'Region Name', 'Variable Name', 'Age Name', and '2008'.\n\n::: {.cell}\n\n```{.python .cell-code}\n# Print column names to the list\nss_census_raw.columns.to_list()\n\n# Subset the columns\n```\n\n::: {.cell-output-stdout}\n```\n['Region', 'Region Name', 'Region - RegionId', 'Variable', 'Variable Name', 'Age', 'Age Name', 'Scale', 'Units', '2008']\n```\n:::\n\n```{.python .cell-code}\ncols = ['Region Name', 'Variable Name', 'Age Name', '2008']\n```\n:::\n\n### Cleaning the Data\n\n::: {.cell}\n\n```{.python .cell-code}\n# Rename columns\ncols_names = {'Region Name':'state', \n             'Variable Name':'gender', \n             'Age Name':'age_cat', \n             '2008':'population'}\n             \n# Create new age categories           \nnew_age_cats = {'0 to 4':'0-14', \n                '5 to 9':'0-14',\n                '10 to 14':'0-14',\n                '15 to 19':'15-29', \n                '20 to 24':'15-29',\n                '25 to 29':'15-29',\n                '30 to 34':'30-49', \n                '35 to 39':'30-49',\n                '40 to 44':'30-49',\n                '45 to 49':'30-49', \n                '50 to 54':'50-64', \n                '55 to 59':'50-64',\n                '60 to 64':'50-64', \n                '65+':'>= 65'\n                }\n             \n# Clean the data\ndf = (ss_census_raw\n      [cols]\n      .rename(columns = cols_names)\n      .query('~age_cat.isna()')\n      .assign(gender = lambda x:x['gender'].str.split('\\s+').str[1],\n             age_cat = lambda x:x['age_cat'].replace(new_age_cats),\n             population = lambda x:x['population'].astype('int')\n      )\n      .query('gender != \"Total\" & age_cat != \"Total\"')\n      .groupby(['state', 'gender', 'age_cat'])['population']\n      .sum()\n      .reset_index()\n     )\n     \n# Inspect the first 5 rows\ndf.head()\n```\n\n::: {.cell-output-stdout}\n```\n               state  gender age_cat  population\n0  Central Equatoria  Female    0-14      221216\n1  Central Equatoria  Female   15-29      166887\n2  Central Equatoria  Female   30-49      101676\n3  Central Equatoria  Female   50-64       23460\n4  Central Equatoria  Female   >= 65        8596\n```\n:::\n:::\n\nIn the preceding code chunk, we first filtered the dataset using the desired columns, renamed the columns with the `rename()` method, and deleted the rows with missing values with the `.query()`method.\n\n### Using the split()\n\nFurther, as you can see above, the `Variable Name` column contains three pieces of information: `Population`, `Total/Male/Female,` and `(Number)`, separated by both commas and spaces.\nThis column contains gender information, so we're only interested in the `Total/Male/Female` portion of this column.\nTherefore, we split this column into three columns using the `.split()` method (combined with str since this is a string), but we only kept the middle portion using its index.\n\nNext, we created new age categories to reduce the number of already existing age groups and used `replace()` to overwrite old categories.\nThen, we converted the population column `2008` to integer or numeric values using the `.astype()` method and supplied it with the data type int, short for integer.\nLastly, we used the `.query()` to filter out the `total` rows in `gender` and the `age category` columns, grouped the data by *state*, *gender*, and *age category*, calculated the population's sum, and then reset the index with `.reset_index()`.\n\n### The Replace() Method\n\nThe `replace()` method from the [pandas library](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html \"replace()\") works as follows:\n\n-   df.replace('old value', 'new value), for a single value.\n\n-   df.replace(\\['old value 1', 'old value 2', 'old value 3'\\], \\['new value 1', 'new value 2', 'new value 3'\\]) for a list of values.\n\n-   df.replace({'colum_name': {'old value 1':'new value 1', 'old value 2':'new value 2'}})\n\n## Summarizing Data by State, Gender, and Age Category\n\n### Summarizing Data by State - `groupby()`\n\n::: {.cell}\n\n```{.python .cell-code}\n# Group the dataset by state and then summarize\nstate_df = (df\n            .groupby(['state'])['population']\n            .sum()\n            .reset_index()\n            .sort_values(['population'], ascending = False)\n            )\n\n# Print the output\nstate_df\n```\n\n::: {.cell-output-stdout}\n```\n                     state  population\n2                  Jonglei     1358602\n0        Central Equatoria     1103557\n7                   Warrap      972928\n6               Upper Nile      964353\n1        Eastern Equatoria      906161\n4  Northern Bahr el Ghazal      720898\n3                    Lakes      695730\n9        Western Equatoria      619029\n5                    Unity      585801\n8   Western Bahr el Ghazal      333431\n```\n:::\n:::\n\n### Summarizing Data by State and Gender - `groupby()`\n\n::: {.cell}\n\n```{.python .cell-code}\n# Group the dataset by state and gender; summarize.\ngender_df = (df\n             .groupby(['state', 'gender'])['population']\n             .sum()\n             .reset_index()\n             .sort_values(['population'], ascending = False)\n             )\n\n# Print the output\ngender_df\n```\n\n::: {.cell-output-stdout}\n```\n                      state  gender  population\n5                   Jonglei    Male      734327\n4                   Jonglei  Female      624275\n1         Central Equatoria    Male      581722\n13               Upper Nile    Male      525430\n0         Central Equatoria  Female      521835\n14                   Warrap  Female      502194\n15                   Warrap    Male      470734\n3         Eastern Equatoria    Male      465187\n2         Eastern Equatoria  Female      440974\n12               Upper Nile  Female      438923\n8   Northern Bahr el Ghazal  Female      372608\n7                     Lakes    Male      365880\n9   Northern Bahr el Ghazal    Male      348290\n6                     Lakes  Female      329850\n19        Western Equatoria    Male      318443\n18        Western Equatoria  Female      300586\n11                    Unity    Male      300247\n10                    Unity  Female      285554\n17   Western Bahr el Ghazal    Male      177040\n16   Western Bahr el Ghazal  Female      156391\n```\n:::\n:::\n\nNow that we have cleaned, manipulated, and transformed our dataset, we will shift our attention to exploratory data analysis (or `EDA`).\nSo, in the above chunks, we grouped the dataset with the `groupby()` method by the *state* column and by *state and gender* columns, then computed states' totals with the `sum()` method.\nNext, we reset the index with the `reset_index()` method.\nAdditionally, we sorted our data using the `.sort_values(),`and we set ascending to `False` to arrange our dataset in descending order.\\\n\n## Tabulating the Data with the `pandas pivot_table()`\n\n### Summarizing Data by State and Gender - `pivot_table()`\n\n::: {.cell}\n\n```{.python .cell-code}\n# Pivot the dataset\ntable_1 = (df\n         .pivot_table(index = ['state', 'gender'],\n         values = 'population',  \n         aggfunc = np.sum, margins = True, \n         margins_name = 'total population')\n         .sort_values(['population'], ascending = False)\n         )\n \n# Print the output\ntable_1\n```\n\n::: {.cell-output-stdout}\n```\n                                population\nstate                   gender            \ntotal population                   8260490\nJonglei                 Male        734327\n                        Female      624275\nCentral Equatoria       Male        581722\nUpper Nile              Male        525430\nCentral Equatoria       Female      521835\nWarrap                  Female      502194\n                        Male        470734\nEastern Equatoria       Male        465187\n                        Female      440974\nUpper Nile              Female      438923\nNorthern Bahr el Ghazal Female      372608\nLakes                   Male        365880\nNorthern Bahr el Ghazal Male        348290\nLakes                   Female      329850\nWestern Equatoria       Male        318443\n                        Female      300586\nUnity                   Male        300247\n                        Female      285554\nWestern Bahr el Ghazal  Male        177040\n                        Female      156391\n```\n:::\n:::\n\n#### Summarizing by State, Gender, and Age Category - `pivot_table()`\n\n::: {.cell}\n\n```{.python .cell-code}\n# Pivot the dataset\ntable_2 = (df\n           .pivot_table(index = ['state', 'gender', 'age_cat'],\n            values = 'population',  \n            aggfunc = np.sum, margins = True, \n            margins_name = 'total population')\n            .sort_values(['population'], ascending = False)\n         )\n \n# Print the output\ntable_2.head(10)\n```\n\n::: {.cell-output-stdout}\n```\n                                  population\nstate             gender age_cat            \ntotal population                     8260490\nJonglei           Male   0-14         338443\n                  Female 0-14         263646\nCentral Equatoria Male   0-14         242247\nUpper Nile        Male   0-14         237461\nWarrap            Male   0-14         230854\n                  Female 0-14         222745\nCentral Equatoria Female 0-14         221216\nEastern Equatoria Male   0-14         212728\nJonglei           Male   15-29        195110\n```\n:::\n:::\n\nAbove, we tabulated our data with the `pivot_table()` method.\nNext, we sorted the table by population column, and then we displayed the table.\nHere it's worth noting that we obtained the same results that we got using the `groupb()` method.\n\n> Grouping is one of the most powerful tools that `pandas` provides.\n> It is the underpinning of the `.pivot_table` method, which in turn implements the \\`pd.cross_tab function.\n> *(Effective Pandas by Matt Harrison, 20221 p. 326)*\n\n## Marrying `R` with `Python`\n\nAs we stated in the introduction section, this article aims to demonstrate that data scientists and data analysts (and indeed, data teams) can benefit tremendously by leveraging the powers and strengths of both `R` and `Python` instead of viewing these data science programming languages as rivals.\nHence, in the below sections, we'll visualize our data with the `ggplot2` package, one of the `tidyverse` core packages.\n\n### Visualizing the Data with `ggplot2`\n\n`ggplot2` is the most popular `R` data visualization package by Hadley Wickham.\nTo begin with, we used `py$` to call `Python's` object within the `R's code chunk` in the below chunk.\nNext, we initialized the canvas with the `ggplot()` function and assigned the `state` column to the x-axis and p`opulation` column to the y-axis.\nThen, we sorted the `state` column values using the `fct_order()` and `fct_rev()` functions from the `forcats` package.\nThis orders our data in descending order using the population column.\n\n::: {.cell .column-page layout-align=\"center\"}\n\n```{.r .cell-code}\n# Convert Python dataframe into R data frame/tibble\nstate_tbl <- py$state_df \n \n\n# Plot state data\nstate_g <- \n  \n  state_tbl %>% \n  \n  # Modify state names to wrap around the x-axis.\n  mutate(state = state %>% str_wrap(width = 15),\n         state = state %>% fct_reorder(population) %>% fct_rev(),\n         label = population %>% \n           scales::number(scale = 1e-6, accuracy = 0.01, suffix = \"m\")) %>% \n  \n  # Initialize the canvas\n  ggplot(aes(state, population)) +\n       \n       # Add the geometries: we're using seaborn colorblind color #7.\n       geom_col(fill = '#84ba3d') +\n       ggrepel::geom_label_repel(aes(label = label)) +\n  \n       # Formatting\n       theme_tufte() +\n       \n       # Add the title, x-axis title, and y-axis title.\n       labs(\n         title    = 'South Sudan 2008 Census by State',\n         x        = NULL,\n         y        = 'Population',\n         caption  = 'Caption: Jonglei State has the largest population.') +\n      \n       # Adjust the y-axis scale.\n       scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +\n       \n       # Modify the y-axis limits.\n       expand_limits(y = c(0, 1500000)) +\n  \n       # Adjust graph attributes.\n       theme(\n         plot.title          = element_text(hjust  = 0.5, \n                                            face   = 'plain',\n                                            size   = 15,\n                                            margin = margin(0, 0, 15, 0, unit = \"pt\")),\n         plot.subtitle       = element_text(hjust  = 0.5, \n                                            margin = margin(2, 0, 10, 0, unit = \"pt\")),\n         axis.text.x         = element_text(angle  = 45, \n                                            hjust  = 1)\n       ) \n       \n# Display the graph.\nstate_g \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Graph population by state and gender in ascending order.\ngender_tbl <- py$gender_df\n\n# Plot data by state and gender\ngender_g <- gender_tbl %>% \n  \n  # Modify state names to wrap around the x-axis.\n  mutate(state = state %>% str_wrap(width = 15),\n         state = state %>% fct_reorder(population) %>% fct_rev()) %>% \n  \n  # initialize the canvas\n  ggplot(aes(state, population)) +\n       \n  # Add the geometries.\n  geom_col(aes(fill = gender)) +\n  \n  # Adjust the y-axis scale.\n  scale_y_continuous(labels = scales::number_format(scale = 1e-6, suffix = 'M')) +\n  expand_limits(y = c(0, 1500000)) +\n\n  # Formatting\n  theme_clean() +\n \n  # Add the title, x-axis title, and y-axis title.\n  labs(\n    title    = 'South Sudan 2008 Census Data by State and Gender',\n    x        = NULL,\n    y        = 'Population') +\n \n  # Adjust the graph attributes.\n  theme(\n     plot.title          = element_text(hjust  = 0.5,\n                                        face = 'plain',\n                                        margin = margin(0, 0, 15, 0, unit = \"pt\")),\n     plot.subtitle       = element_text(hjust  = 0.5,\n                                        margin = margin(2, 0, 10, 0, unit = \"pt\")),\n     axis.text.x         = element_text(angle = 30, hjust  = 1),\n     legend.position     = \"top\"\n   )\n\n\n# Display the graph\ngender_g\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n We visualized the data by state and by state and gender in the preceding two sections.\nMoreover, we organized the data by population in descending order.\nIt is best to display the data in ascending or descending order to avoid confusing your readers.\n\n## Closing Remarks\n\nThis post demonstrated how to perform data wrangling with `pandas` and visualize it with `ggplot2` in `RStudio`.\nA word of caution: we are not saying that this is the actual population of South Sudan.\nInstead, we used the data to highlight a few data wrangling techniques within the `pandas` library.\n\nHowever, on the inferential side, government agencies would draw decisions about public amenities such as schools, kindergartens, maternity wards, and healthcare centers and where to build them from this analysis.\nThe distribution of the national resources and state representations could be determined by this analysis as well.\nHowever, that's not the objective of our post, and thus, we will leave it there.\n\n## References\n\nMcKinney, W.(2017). *Python for Data Analysis, 2nd Edition. O'Reilly Media, Inc.*\n\nHarrison, M.\n(2021).\n*Effective Pandas: Patterns for data manipulation.*",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}